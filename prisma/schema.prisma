// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["driverAdapters","filterJson"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              Int      @id @default(autoincrement())
  userId          String   @unique
  email           String   @unique
  username        String   @unique
  password        String?
  isDisabled      Boolean  @default(false)
  hadExternalAuth Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Profile      Profile?
  ExternalAuth ExternalAuth[]
  Sessions     Sessions[]

  @@index([email])
  @@index([userId])
}

model Sessions {
  id               Int      @id @default(autoincrement())
  sessionId        String   @unique
  userId           String
  refreshTokenHash String   @unique
  revoked          Boolean  @default(false)
  createdAt        DateTime @default(now())
  expiresAt        DateTime
  ip               String?
  userAgent        String?

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
  @@index([refreshTokenHash])
}

model ExternalAuth {
  id         Int    @id @default(autoincrement())
  provider   String
  externalId String
  userId     String
  user       User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([provider, externalId])
}

model Profile {
  id         Int     @id @default(autoincrement())
  userId     String  @unique
  name       String
  lastName   String
  country    String?
  city       String?
  bio        String
  avatar     String?
  languages  Json    @default("[]")
  frameworks Json    @default("[]")
  tools      Json    @default("[]")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
}
